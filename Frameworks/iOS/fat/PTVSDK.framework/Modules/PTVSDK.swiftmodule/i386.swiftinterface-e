// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
// swift-module-flags: -target i386-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PTVSDK
import AVFoundation
import Foundation
@_exported import PTVSDK
import Swift
import UIKit
import WebKit
@objc public class PTVOverlayView : ObjectiveC.NSObject {
  public func addOverlaysToPlayerView(playerView: UIKit.UIView?, overlayData: PTVSDK.PTVSDKOverlayData)
  public func disableOverlays()
  public func enableOverlays()
  public func hideOverlays(enableTap: Swift.Bool = false)
  public func removeOverlays()
  public func showOverlays(enableTap: Swift.Bool = true)
  public func startOverlays()
  public func stopOverlays()
  public func timeUpdate(seconds: Swift.Double)
  @objc override dynamic public init()
  @objc deinit
}
extension PTVOverlayView : WebKit.WKNavigationDelegate {
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
}
extension PTVOverlayView : WebKit.WKScriptMessageHandler {
  @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
extension PTVOverlayView : WebKit.WKUIDelegate {
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @objc dynamic public func webViewDidClose(_ webView: WebKit.WKWebView)
}
@objc @objcMembers public class PTVSDKOverlayDataPlatform : ObjectiveC.NSObject {
  @objc public var id: Swift.String?
  @objc public var name: Swift.String?
  @objc public var type: Swift.String?
  @objc convenience public init(id: Swift.String, name: Swift.String, type: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class PTVSDKOverlayData : ObjectiveC.NSObject {
  public typealias Platform = PTVSDK.PTVSDKOverlayDataPlatform
  public var apiHost: PTVSDK.PTVSDKOverlayData.APIHost?
  @objc public var channelId: Swift.String?
  public var debug: Swift.Bool?
  public var enableGeoBlock: Swift.Bool?
  public var env: PTVSDK.PTVSDKOverlayData.Environment?
  @objc public var platformId: Swift.String?
  @objc public var platformName: Swift.String?
  @objc public var platformType: Swift.String?
  public var previewMode: Swift.Bool?
  @objc public var streamId: Swift.String?
  @objc public var viewerId: Swift.String?
  @objc public var isComplete: Swift.Bool {
    @objc get
  }
  convenience public init(channelId: Swift.String? = nil, streamId: Swift.String? = nil, platform: PTVSDK.PTVSDKOverlayData.Platform? = nil, viewerId: Swift.String? = nil, apiHost: PTVSDK.PTVSDKOverlayData.APIHost? = nil, debug: Swift.Bool? = false, enableGeoBlock: Swift.Bool? = false, env: PTVSDK.PTVSDKOverlayData.Environment? = nil, previewMode: Swift.Bool? = false)
  @objc convenience public init(channelId: Swift.String?, streamId: Swift.String?)
  @objc convenience public init(platform: PTVSDK.PTVSDKOverlayData.Platform?)
  @objc public var url: Foundation.URL? {
    @objc get
  }
  public enum APIHost {
    case dev, comdev, qa, staging, production
    public static let all: [PTVSDK.PTVSDKOverlayData.APIHost]
    public var index: Swift.Int {
      get
    }
    public static func == (a: PTVSDK.PTVSDKOverlayData.APIHost, b: PTVSDK.PTVSDKOverlayData.APIHost) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public enum Environment {
    case dev, comdev, qa, staging, production
    public static let all: [PTVSDK.PTVSDKOverlayData.Environment]
    public var index: Swift.Int {
      get
    }
    public static func == (a: PTVSDK.PTVSDKOverlayData.Environment, b: PTVSDK.PTVSDKOverlayData.Environment) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public class PTVSDK : ObjectiveC.NSObject {
  public static var DEBUG: Swift.Bool
  public static var DEV: Swift.Bool
  @objc public static var onConfigReady: (@convention(block) (PTVSDK.PTVSDKConfigData) -> ())?
  @objc public static var currentTime: Swift.Double {
    @objc get
    @objc set
  }
  @objc public static var isPlaying: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public static func monitorAVPlayer(player: AVFoundation.AVPlayer?)
  @objc public static func unmonitorAVPlayer()
  @objc public static func addOverlaysToPlayerView(playerView: UIKit.UIView?, overlayData: PTVSDK.PTVSDKOverlayData)
  @objc public static func removeOverlays()
  @objc public static func disableOverlays()
  @objc public static func enableOverlays()
  @objc public static func hideOverlays(enableTap: Swift.Bool = false)
  @objc public static func showOverlays(enableTap: Swift.Bool = true)
  @objc public static func startOverlays()
  @objc public static func stopOverlays()
  @objc public static func timeUpdate(seconds: Swift.Double)
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class PTVSDKStreamSource : ObjectiveC.NSObject {
  @objc public var mimeType: Swift.String?
  @objc public var url: Foundation.URL?
  @objc public init(_ data: Swift.Dictionary<Swift.String, Any>?)
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class PTVSDKConfigData : ObjectiveC.NSObject {
  @objc public var sources: [PTVSDK.PTVSDKStreamSource]?
  @objc public init(data: Swift.Dictionary<Swift.String, Any>?)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class PTVPlayerObserver : ObjectiveC.NSObject {
  @objc deinit
  public func monitorAVPlayer(_ player: AVFoundation.AVPlayer?)
  public func monitorAVPlayerLayer(_ playerLayer: AVFoundation.AVPlayerLayer?)
  public func unmonitorAVPlayer()
  public func destroyObservers()
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc override dynamic public init()
}
extension PTVSDK.PTVSDKOverlayData.APIHost : Swift.Equatable {}
extension PTVSDK.PTVSDKOverlayData.APIHost : Swift.Hashable {}
extension PTVSDK.PTVSDKOverlayData.Environment : Swift.Equatable {}
extension PTVSDK.PTVSDKOverlayData.Environment : Swift.Hashable {}
